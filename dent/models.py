from contextlib import nullcontext
from email import message
from email.policy import default
from django.db import models
from datetime import date, datetime
from phone_field import PhoneField
from tinymce.models import HTMLField
from django.urls import reverse
from django.contrib.auth.models import User

class Organisation(models.Model):
    id = models.AutoField(primary_key=True)
    org_id = models.CharField(blank=True, null=True, max_length=200)
    date=models.DateTimeField(default=datetime.now())
    orgname = models.CharField(max_length=200)
    ctperson_name=models.CharField(blank=True, null=True, max_length=200)
    manager = models.CharField(blank=True, null=True, max_length=200)
    orgtype=models.CharField(max_length=200)
    email = models.EmailField()
    contact = PhoneField(blank=True, help_text='Contact phone number')
    gstin = models.ImageField(upload_to='static/gstFile/', blank=True, null=True)
    status = models.CharField(max_length=20)
    address = models.CharField(max_length=64)
    parent_id = models.CharField(max_length=100, null=True, blank = True)
    offered_service = models.CharField(max_length=100, null=True, blank = True)
    city = models.CharField(blank=True, max_length=50)
    state = models.CharField(blank=True, max_length=50)
    pincode = models.CharField(blank=True, max_length=50)
    country = models.CharField(blank=True, max_length=30)
    regby_email= models.EmailField(blank=True, null=True)
    regby_userid = models.IntegerField(blank=True, null=True)
    logo = models.ImageField(upload_to='static/logo/', blank=True, null=True)
    pan = models.CharField(blank=True, max_length=30)
    cin = models.CharField(blank=True, max_length=30)
    regFile = models.ImageField(upload_to='static/regFile/', blank=True, null=True)
    bankName = models.CharField(blank=True, max_length=30)
    accountNumber = models.IntegerField(blank=True, null=True)
    ifscCode = models.CharField(blank=True, max_length=30)
    customFile = models.ImageField(upload_to = 'static/cancelledCheque/', null=True)
    paymentOption = models.CharField(blank = True, null = True, max_length = 100)
    topUp = models.IntegerField(blank = True, null = True)
    topUpAvailable = models.IntegerField(blank=True, null=True)
    preferredLab = models.IntegerField(blank=True, null=True)
    pickup = models.CharField(blank = True, null = True, max_length = 100)
    admin = models.IntegerField(blank=True, null=True)
    managerId = models.IntegerField(blank=True, null=True)
    subscription = models.CharField(null=True, blank=True, max_length=100, default="Dentread Basic")
    subscriptionId = models.IntegerField(null=True, blank=True, default=1)
    pickuplocation = models.CharField(blank = True, null = True, max_length = 100)
    objects = models.Manager()

class Users(models.Model):
    id = models.AutoField(primary_key=True)
    propic = models.ImageField(upload_to='static/profilepic/')
    sign = models.ImageField(upload_to='static/sign/', blank=True, null=True)
    name = models.CharField(max_length=200)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    usertype = models.CharField(max_length=200)
    email = models.EmailField()
    username = models.CharField(max_length=128)
    password = models.CharField(max_length=128)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    department = models.CharField(max_length=20)
    status = models.CharField(max_length=800)
    cbcta = models.CharField(blank=True, null=True, max_length=20)
    cbctb = models.CharField(blank=True, null=True, max_length=20)
    opg = models.CharField(blank=True, null=True, max_length=20)
    dci = models.CharField(blank=True, null=True, max_length=20)
    edu = models.CharField(blank=True, null=True, max_length=20)
    spec = models.CharField(blank=True, null=True, max_length=20)
    reforgid=models.IntegerField(blank=True, null=True)
    last_login = models.DateField(null=True, blank=True)
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    contact = models.CharField(max_length=20)
    otp = models.CharField(max_length=6)
    objects = models.Manager()


# Create Your Branch Here
class Branch(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    branch_name = models.CharField(max_length=100)
    email = models.EmailField()
    status = models.CharField(max_length=100)
    mobile = PhoneField(blank=True, help_text='Contact mobile number')
    adress = models.CharField(blank=True, null=True, max_length=150)
    city = models.CharField(blank=True, max_length=50)
    state = models.CharField(blank=True, max_length=50)
    zipcode = models.CharField(blank=True, max_length=50)
    country = models.CharField(blank=True, max_length=30)
    regby_email= models.EmailField(blank=True, null=True)
    regby_userid = models.IntegerField(blank=True, null=True)
    ctperson_name = models.CharField(blank=True, null=True, max_length=200)
    manager = models.CharField(blank=True, null=True, max_length=200)
    objects = models.Manager()
    
# Create your models here.
class Patient(models.Model):
    id = models.AutoField(primary_key=True)
    pid = models.CharField(null=True, blank=True, max_length=200)
    models.CharField(null=True, blank=True, max_length=200)
    orgid=models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    locate = models.CharField(max_length=200)
    regby = models.CharField(max_length=200)
    rdate = models.DateField(default=date.today)
    name = models.CharField(max_length=200)
    age = models.IntegerField(blank=True)
    gender = models.CharField(max_length=6)
    email = models.EmailField()
    contact = PhoneField(blank=True, help_text='Contact phone number')
    address_1 = models.CharField(max_length=128)
    address_2 = models.CharField(max_length=128)
    city = models.CharField(max_length=64)
    state = models.CharField(max_length=100)
    zip_code = models.CharField(max_length=5, default="000000")
    medih = models.CharField(max_length=800)
    refdoctor = models.CharField(max_length=50,blank=True, null=True)
    docid = models.IntegerField(blank=True, null=True)
    reffor = models.CharField(max_length=300)
    dcm_status = models.CharField(max_length=50, blank=True, null=True)
    refptid = models.IntegerField(blank=True, null=True)
    refpt_orgid=models.IntegerField(blank=True, null=True)
    reforgid = models.IntegerField(blank=True, null=True)
    objects = models.Manager()

class Refdoctor(models.Model):
    id = models.AutoField(primary_key=True)
    docid = models.IntegerField(blank=True, null=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    locate = models.CharField(max_length=200)
    incentive = models.CharField(max_length=200)
    discount = models.IntegerField(blank=True, null=True)
    regby = models.CharField(max_length=200)
    rdate = models.DateField(default=date.today)
    name = models.CharField(max_length=200)
    gender = models.CharField(max_length=6)
    email = models.EmailField()
    contact = PhoneField(blank=True, help_text='Contact phone number')
    address_1 = models.CharField(max_length=128)
    address_2 = models.CharField(max_length=128)
    city = models.CharField(max_length=64)
    state = models.CharField(max_length=100)
    zip_code = models.CharField(max_length=5, default="000000")
    other = models.CharField(max_length=800)
    clinic = models.CharField(max_length=50)
    referby = models.CharField(null=True, blank=True, max_length=50)
    clcontact = models.EmailField()
    objects = models.Manager()

class Study(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    topcat = models.CharField(null=True, blank=True, max_length=200)
    title = models.CharField(max_length=200)
    maincat = models.CharField(max_length=200)
    subcat = models.CharField(max_length=200)
    price = models.IntegerField()
    dollarPrice = models.IntegerField()
    objects = models.Manager()



class Invoice(models.Model):
    id = models.AutoField(primary_key=True)
    date=models.DateField(default=date.today)
    refdoc = models.CharField(max_length=200)
    refclinic = models.CharField(max_length=50)
    pid = models.IntegerField()
    orgid=models.ForeignKey(Organisation, on_delete=models.CASCADE)
    name = models.CharField(max_length=200)
    location = models.CharField(max_length=200)
    study = models.CharField(max_length=200)
    studydes= models.CharField(max_length=200)
    price = models.CharField(max_length=200)
    discount = models.CharField(max_length=200)
    payable = models.IntegerField()
    paid = models.IntegerField()
    balance = models.IntegerField()
    mode = models.CharField(max_length=200)
    sgst = models.IntegerField(default=0)
    cgst = models.IntegerField(default=0)
    igst = models.IntegerField(default=0)
    invid = models.IntegerField()
    prescription = models.ImageField(upload_to='static/prescription/')
    refptid = models.IntegerField(blank=True, null=True)
    refpt_orgid = models.IntegerField(blank=True, null=True)
    objects = models.Manager()

class Dent_Invoice(models.Model):
    id = models.AutoField(primary_key=True)
    date=models.DateField(default=date.today)
    refdoc = models.CharField(max_length=200)
    refclinic = models.CharField(max_length=50)
    pid = models.IntegerField()
    orgid=models.ForeignKey(Organisation, on_delete=models.CASCADE)
    name = models.CharField(max_length=200)
    study = models.CharField(max_length=200)
    price = models.CharField(max_length=200)
    invid= models.IntegerField()
    refptid = models.IntegerField(blank=True, null=True)
    refpt_orgid = models.IntegerField(blank=True, null=True)
    objects = models.Manager()


class ClinicFile(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    refptid=models.CharField(max_length=200)
    file = models.FileField(upload_to='static/cfiles/')
    objects = models.Manager()

class ServiceOrder(models.Model):
    id = models.AutoField(primary_key=True)
    order_id = models.CharField(null=True, blank=True, max_length=200)
    date=models.DateField(default=date.today)
    pid=models.CharField(null=True, blank=True, max_length=200)
    repid = models.IntegerField(null=True, blank=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    locate = models.CharField(max_length=200)
    age = models.IntegerField()
    name = models.CharField(max_length=200)
    study = models.CharField(max_length=200)
    text = HTMLField()
    repby= models.CharField(max_length=200)
    status = models.CharField(max_length=200)
    remark= models.CharField(max_length=400)
    prescription = models.ImageField(upload_to='static/prescription/')
    repsdate = models.DateTimeField(null=True, blank=True)
    signby=models.CharField(max_length=200)
    badge=models.CharField(max_length=400)
    signurl=models.CharField(max_length=400)
    portal = models.CharField(max_length=50)
    mailstatus = models.CharField(null=True, blank=True,max_length=50)
    upload = models.CharField(null=True, blank=True,max_length=50)
    ON_processby = models.CharField(null=True, blank=True, max_length=50)
    refptid = models.IntegerField(blank=True, null=True)
    refpt_orgid = models.IntegerField(blank=True, null=True)
    price = models.IntegerField(blank=True, null=True)
    pt_email = models.EmailField(blank=True, null=True)
    pt_contact=models.IntegerField(blank=True, null=True)
    reg_by = models.CharField(null=True, blank=True, max_length=50)
    gender = models.CharField(null=True, blank=True, max_length=100)
    reforgid = models.IntegerField(blank=True, null=True)
    price = models.CharField(max_length=200, blank=True, null=True)
    discount = models.CharField(max_length=200, blank=True, null=True)
    payable = models.IntegerField(blank=True, null=True)
    paid = models.IntegerField(blank=True, null=True)
    balance = models.IntegerField(blank=True, null=True)
    mode = models.CharField(max_length=200, blank=True, null=True)
    sgst = models.IntegerField(default=0, blank=True, null=True)
    cgst = models.IntegerField(default=0, blank=True, null=True)
    igst = models.IntegerField(default=0, blank=True, null=True)
    reforgid = models.IntegerField(blank=True, null=True)
    refstudy = models.CharField(max_length=200, blank=True, null=True)
    ref_price = models.IntegerField(blank=True, null=True)
    ref_paid =models.CharField(max_length=200, blank=True, null=True)
    ref_balance = models.CharField(max_length=200, blank=True, null=True)
    ParentPatient = models.CharField(max_length=200, blank=True, null=True)
    ParentStudy = models.CharField(max_length=200, blank=True, null=True)
    StudyInstanceUID = models.CharField(max_length=200, blank=True, null=True)
    driveid = models.CharField(max_length=200, blank=True, null=True)
    drivelink = models.CharField(max_length=200, blank=True, null=True)
    patient_id = models.CharField(null=True, blank=True, max_length=100)
    created_by = models.CharField(null=True, blank=True, max_length=100)
    reviewed_by = models.CharField(null=True, blank=True, max_length=100)
    shipped_by = models.CharField(null=True, blank=True, max_length=100)
    tracking_id = models.CharField(null=True, blank=True, max_length=100)
    #Payment Status
    ORDERID = models.CharField(max_length=100, blank=True, null=True)
    TXNID = models.CharField(max_length=100, blank=True, null=True)
    TXNAMOUNT = models.CharField(max_length=100, blank=True, null=True)
    BANKTXNID = models.CharField(max_length=100, blank=True, null=True)
    TXNDATE = models.DateTimeField(blank=True, null=True)
    RESPMSG = models.CharField(max_length=100, blank=True, null=True)
    paymentStatus = models.CharField(max_length=100, blank=True, null=True)
    preferredData = models.CharField(max_length=100, default = 'digitalData')
    lineOrderPrice = models.IntegerField(null=True, blank=True)
    tooth_notation = models.CharField(null= True, blank = True, max_length=50, default = 'FDI')
    referTo = models.IntegerField(null=True, blank=True)
    #File Info
    file = models.CharField(max_length=100, null = True, blank = True)
    size = models.IntegerField(null = True, blank = True)
    objects = models.Manager()
    #NextDicom
    ParentPatient1 = models.CharField(max_length=200, blank=True, null=True)
    ParentStudy1 = models.CharField(max_length=200, blank=True, null=True)
    StudyInstanceUID1 = models.CharField(max_length=200, blank=True, null=True)
    upload1 = models.CharField(null=True, blank=True,max_length=50)
    file1 = models.CharField(max_length=100, null = True, blank = True)
    size1 = models.IntegerField(null = True, blank = True)
    fileStatus = models.CharField(max_length=100, null = True, blank = True)
    fileComment = models.CharField(max_length=100, null = True, blank = True)
    fileStatus1 = models.CharField(max_length=100, null = True, blank = True)
    fileComment1 = models.CharField(max_length=100, null = True, blank = True)
    instance = models.CharField(max_length=200, blank=True, null=True)
    Path = models.CharField(max_length=200, blank=True, null=True)
    thumbnail = models.ImageField(upload_to='static/dicomThumb/', null=True, blank=True)
    #Shipments
    shp_order_id = models.IntegerField(blank=True, null=True)
    shipment_id = models.IntegerField(blank=True, null=True)
    shipTo = models.CharField(max_length=200, blank=True, null=True)
    shipBy = models.CharField(max_length=200, blank=True, null=True)
    ship_status = models.CharField(max_length=200, blank=True, null=True)
    ship_date = models.DateField(null = True, blank=True)
    requestForShipment = models.CharField(max_length=200, blank=True, null=True)
    shpDescription = models.TextField()
    pickup_scheduled_date = models.DateTimeField(blank=True, null=True)
    awb_code = models.CharField(max_length=200, blank=True, null=True)
    courier_name = models.CharField(max_length=200, blank=True, null=True)
    
class Department(models.Model):
    id = models.AutoField(primary_key=True)
    dprtname = models.CharField(max_length=200)
    usrtype= models.CharField(max_length=100)
    objects = models.Manager()


class Partners(models.Model):
    id = models.AutoField(primary_key=True)
    sent_date=models.DateField(default=date.today)
    req_sender=models.CharField(max_length=200, blank=True, null=True)
    req_msg=models.CharField(max_length=1000, blank=True, null=True)
    req_receiver = models.CharField(max_length=200, blank=True, null=True)
    req_status=models.CharField(max_length=200, blank=True, null=True)
    response_date=models.DateField(blank=True, null=True)
    objects = models.Manager()




class Items(models.Model):
    id = models.AutoField(primary_key=True)
    item = models.CharField(max_length=200)
    detail = models.CharField(max_length=200)
    price = models.CharField(max_length=200)
    objects = models.Manager()

class Inventory(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    date = models.DateField(default=date.today)
    item = models.CharField(max_length=200)
    remark = models.CharField(max_length=200)
    price = models.CharField(max_length=200)
    pid=models.CharField(max_length=200)
    qty = models.IntegerField()
    objects = models.Manager()

class Expenses(models.Model):
    id = models.AutoField(primary_key=True)
    month = models.DateField(default=date.today)
    expensetype = models.CharField(max_length=200)
    remark = models.CharField(max_length=200)
    amount = models.IntegerField(null=True, blank=True)
    saleamount=models.IntegerField(null=True, blank=True)
    locate = models.CharField(max_length=200)
    objects = models.Manager()


class Refpt(models.Model):
    id = models.AutoField(primary_key=True)
    refptid=models.IntegerField()
    ref_centre = models.CharField(max_length=200, blank=True, null=True)
    regby = models.CharField(max_length=200)
    orgid=models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    rdate = models.DateField(default=date.today)
    name = models.CharField(max_length=200)
    pid = models.CharField(max_length=200)
    age = models.IntegerField(blank=True)
    gender = models.CharField(max_length=6)
    upload = models.CharField(max_length=6)
    email = models.EmailField()
    contact = PhoneField(blank=True, help_text='Contact phone number')
    btnstatus = models.CharField(max_length=20)
    study=models.CharField(max_length=1000)
    remark = models.CharField(max_length=800)
    hardcopy = models.CharField(max_length=10, blank=True, null=True)
    status=models.CharField(max_length=50)
    objects = models.Manager()


class Topcat(models.Model):
    id = models.AutoField(primary_key=True)
    topcat = models.CharField(null=True, blank=True, max_length=200)
    status = models.CharField(null=True, blank=True, max_length=200)
    url = models.CharField(null=True, blank=True, max_length=200)
    admin_url = models.CharField(null=True, blank=True, max_length=200)
    maincat = models.CharField(null=True, blank=True, max_length=50)
    objects = models.Manager()

class Maincat(models.Model):
    id = models.AutoField(primary_key=True)
    topcat = models.CharField(null=True, blank=True, max_length=200)
    status = models.CharField(null=True, blank=True, max_length=200)
    url = models.CharField(null=True, blank=True, max_length=200)
    objects = models.Manager()


class IOSFile(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    repid = models.IntegerField(null = True, blank = True)
    sodrid = models.IntegerField(null = True, blank = True)
    topid = models.IntegerField(null = True, blank = True)
    pid = models.IntegerField(null = True, blank = True)
    file = models.FileField(upload_to='static/IOSfiles/')
    size = models.IntegerField(null=True, blank=True)
    fileName = models.CharField(max_length=150, null = True, blank = True)
    fileStatus = models.CharField(max_length=100, null = True, blank = True)
    fileComment = models.CharField(max_length=100, null = True, blank = True)
    site = models.CharField(max_length=100, null = True, blank = True)
    badge = models.CharField(max_length=400)
    re_upload = models.CharField(max_length=100, null = True, blank = True)
    download = models.CharField(max_length=100, null = True, blank = True)
    thumbnail = models.ImageField(upload_to='static/thumb/', null = True, blank = True)
    date = models.DateField(default = date.today)
    objects = models.Manager()
    
class OtherImageFile(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    repid = models.IntegerField(null = True, blank = True)
    sodrid = models.IntegerField(null = True, blank = True)
    topid = models.IntegerField(null = True, blank = True)
    pid = models.IntegerField(null = True, blank = True)
    file = models.FileField(upload_to='static/OtherFile/')
    size = models.IntegerField(null=True, blank=True)
    fileName = models.CharField(max_length=100, null = True, blank = True)
    fileStatus = models.CharField(max_length=100, null = True, blank = True)
    fileComment = models.CharField(max_length=100, null = True, blank = True)
    thumbnail = models.ImageField(upload_to='static/otherThumb/', null = True, blank = True)
    date = models.DateField(default = date.today)
    objects = models.Manager()

class ImageAnalysis(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    repid = models.IntegerField(null=True, blank=True)
    date = models.DateTimeField(default = datetime.now)
    sodrid = models.CharField(null=True, blank=True, max_length=200)
    pid = models.IntegerField(null = True, blank = True)
    tooth = models.CharField(null=True, blank=True, max_length=200)
    data_type = models.CharField(null=True, blank=True, max_length=200)
    service_catagory = models.CharField(null=True, blank=True, max_length=200)
    sub_category = models.CharField(null=True, blank=True, max_length=200)
    price = models.IntegerField(null=True, blank=True)
    remark= models.CharField(null=True, blank=True, max_length=800)
    badge = models.CharField(max_length=400)
    item_id = models.CharField(null=True, blank=True, max_length=800)
    comment = models.CharField(null=True, blank=True, max_length=800)
    status = models.CharField(null=True, blank=True, max_length=800)
    upload = models.CharField(null=True, blank=True, max_length=800)
    text = HTMLField()
    repby= models.CharField(max_length=200)
    signby = models.CharField(max_length=200)
    repsdate = models.DateTimeField(null=True, blank=True)
    service_name = models.CharField(max_length=200, blank=True, null=True)
    ParentPatient = models.CharField(max_length=200, blank=True, null=True)
    ParentStudy=models.CharField(max_length=200, blank=True, null=True)
    StudyInstanceUID = models.CharField(max_length=200, blank=True, null=True)
    mailstatus=models.CharField(null=True, blank=True,max_length=50)
    shipped_by = models.CharField(null=True, blank=True,max_length=150)
    tracking_id = models.IntegerField(blank=True, null=True)
    file = models.CharField(max_length=100, null = True, blank = True)
    size = models.IntegerField(null = True, blank = True)
    name = models.CharField(null=True, blank=True, max_length=200)
    discount = models.IntegerField(null=True, blank=True)
    netAmount = models.IntegerField(null=True, blank=True)
    objects = models.Manager()


class DesignFile(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    pid=models.CharField(max_length=200)
    date = models.DateTimeField(default = datetime.now)
    repid = models.IntegerField(null = True, blank = True)
    serviceid = models.IntegerField(null = True, blank = True)
    sodrid = models.IntegerField(null = True, blank = True)
    file = models.FileField(upload_to='static/design/')
    size = models.IntegerField(null = True, blank = True)
    fileName = models.CharField(max_length=150, null = True, blank = True)
    upload = models.CharField(max_length=100, null = True, blank = True)
    fileStatus = models.CharField(max_length=100, null = True, blank = True)
    fileComment = models.CharField(max_length=100, null = True, blank = True)
    objects = models.Manager()



class FeedFile(models.Model):
    date = models.DateTimeField(default = datetime.now)
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    pid=models.CharField(max_length=200)
    repid = models.IntegerField(null = True, blank = True)
    serviceid = models.IntegerField(null = True, blank = True)
    sodrid = models.IntegerField(null = True, blank = True)
    file = models.FileField(upload_to='static/files/')
    fileName = models.CharField(max_length=150, null = True, blank = True)
    fileStatus = models.CharField(max_length=100, null = True, blank = True)
    fileComment = models.CharField(max_length=100, null = True, blank = True)
    upload = models.CharField(max_length=100, null = True, blank = True)
    size = models.IntegerField(null = True, blank = True)
    objects = models.Manager()


class ImplantPlanning(models.Model):
    id = models.AutoField(primary_key=True)
    repid = models.IntegerField(null=True, blank=True)
    tooth = models.CharField(null=True, blank=True, max_length=200)
    data_type = models.CharField(null=True, blank=True, max_length=200)
    service_catagory = models.CharField(null=True, blank=True, max_length=200)
    planning_type = models.CharField(null=True, blank=True, max_length=200)
    price = models.IntegerField(null=True, blank=True)
    remark= models.CharField(null=True, blank=True, max_length=800)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    item_id = models.CharField(null=True, blank=True, max_length=200)
    sodrid = models.CharField(null=True, blank=True, max_length=200)
    name = models.CharField(null=True, blank=True, max_length=200)
    date = models.DateTimeField(default = datetime.now)
    service_name = models.CharField(null=True, blank=True, max_length=200)
    ParentPatient = models.CharField(max_length=200, blank=True, null=True)
    ParentStudy=models.CharField(max_length=200, blank=True, null=True)
    StudyInstanceUID = models.CharField(max_length=200, blank=True, null=True)
    upload = models.CharField(null=True, blank=True, max_length=800)
    status = models.CharField(null=True, blank=True, max_length=800)
    comment = models.CharField(null=True, blank=True, max_length=800)
    repby= models.CharField(max_length=200)
    signby = models.CharField(max_length=200)
    repsdate = models.DateTimeField(null=True, blank=True)
    badge = models.CharField(max_length=400)
    file = models.CharField(max_length=100, null = True, blank = True)
    size = models.IntegerField(null = True, blank = True)
    pid = models.CharField(null=True, blank=True, max_length=200)
    mailstatus = models.CharField(null=True, blank=True,max_length=50)
    shipped_by = models.CharField(null=True, blank=True,max_length=150)
    tracking_id = models.IntegerField(blank=True, null=True)
    discount = models.IntegerField(null=True, blank=True)
    netAmount = models.IntegerField(null=True, blank=True)
    objects = models.Manager()


class RadiologycalServices(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    repid = models.IntegerField(null=True, blank=True)
    item_id = models.CharField(null=True, blank=True, max_length=200)
    sodrid = models.CharField(null=True, blank=True, max_length=200)
    name = models.CharField(null=True, blank=True, max_length=200)
    date = models.DateTimeField(default = datetime.now)
    service_name = models.CharField(null=True, blank=True, max_length=200)
    pid = models.CharField(null=True, blank=True, max_length=200)
    tooth = models.CharField(null=True, blank=True, max_length=200)
    data_type = models.CharField(null=True, blank=True, max_length=200)
    service_catagory = models.CharField(null=True, blank=True, max_length=200)
    finding_requires = models.CharField(null=True, blank=True, max_length=50)
    price = models.IntegerField(null=True, blank=True)
    ON_processby = models.CharField(null=True, blank=True, max_length=50)
    CS_processby = models.CharField(null=True, blank=True, max_length=50)
    remark= models.CharField(null=True, blank=True, max_length=800)
    order_id = models.CharField(null=True, blank=True, max_length=800)
    comment = models.CharField(null=True, blank=True, max_length=800)
    status = models.CharField(null=True, blank=True, max_length=800)
    repsdate = models.DateTimeField(null=True, blank=True)
    badge=models.CharField(max_length=400)
    signurl=models.CharField(max_length=400)
    portal=models.CharField(max_length=50)
    upload = models.CharField(null=True, blank=True, max_length=800)
    text = HTMLField()
    repby= models.CharField(max_length=200)
    signby = models.CharField(max_length=200)  
    ParentPatient=models.CharField(max_length=200, blank=True, null=True)
    ParentStudy=models.CharField(max_length=200, blank=True, null=True)
    StudyInstanceUID = models.CharField(max_length=200, blank=True, null=True)
    refer_by = models.CharField(max_length=200, blank=True, null=True)
    study = models.CharField(max_length=200, blank=True, null=True)
    mailstatus=models.CharField(null=True, blank=True,max_length=50)
    pt_email = models.EmailField(blank=True, null=True)
    pt_contact=models.IntegerField(blank=True, null=True)
    shipped_by = models.CharField(null=True, blank=True,max_length=150)
    tracking_id = models.IntegerField(blank=True, null=True)
    file = models.CharField(max_length=100, null = True, blank = True)
    size = models.IntegerField(null = True, blank = True)
    discount = models.IntegerField(null=True, blank=True)
    netAmount = models.IntegerField(null=True, blank=True)
    objects = models.Manager()


class Requirements(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    topcat = models.CharField(max_length=100, null=True, blank=True)
    findingsRequired = models.CharField(max_length=100, null=True, blank=True)
    extraFindingsRequired = models.CharField(max_length=100, null=True, blank=True)
    objects = models.Manager()


class Shade(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    topcat = models.CharField(max_length=100, null=True, blank=True)
    shadeType = models.CharField(max_length=100, null=True, blank=True)
    shade = models.CharField(max_length=100, null=True, blank=True)
    objects = models.Manager()
    
    
class Prosthetic(models.Model):
    id = models.AutoField(primary_key=True)
    repid=models.IntegerField(null=True, blank=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    item_id = models.CharField(null=True, blank=True, max_length=200)
    sodrid = models.CharField(null=True, blank=True, max_length=200)
    name = models.CharField(null=True, blank=True, max_length=200)
    date = models.DateField(default=date.today)
    service_name = models.CharField(null=True, blank=True, max_length=200)
    pid = models.CharField(null=True, blank=True, max_length=200)
    tooth=models.CharField(null=True, blank=True, max_length=200)
    item  = models.CharField(null=True, blank=True, max_length=200)
    type = models.CharField(null=True, blank=True, max_length=200)
    method = models.CharField(null=True, blank=True, max_length=200)
    material = models.CharField(null=True, blank=True, max_length=200)
    itemId = models.IntegerField(null=True, blank=True)
    submethod = models.CharField(null=True, blank=True, max_length=100)
    application = models.CharField(null=True, blank=True, max_length=200)
    warranty = models.IntegerField(null=True, blank=True)
    unit = models.IntegerField(default=1)
    pricePerUnit = models.IntegerField(null=True, blank=True)
    price = models.IntegerField(null=True, blank=True)
    extraPrice = models.IntegerField(null=True, blank=True)
    expectedDate = models.CharField(null=True, blank=True, max_length=200)
    shadeType = models.CharField(max_length=100, null=True, blank=True)
    shade = models.CharField(max_length=100, null=True, blank=True)
    remark = models.CharField(null=True, blank=True, max_length=800)
    status = models.CharField(null=True, blank=True, max_length=800)
    comment = models.CharField(null=True, blank=True, max_length=800)
    badge = models.CharField(max_length=400)
    designUploadDate = models.DateTimeField(default = datetime.now)
    shipped_by = models.CharField(null=True, blank=True,max_length=150)
    trackingId = models.CharField(null=True, blank=True, max_length=800)
    DispatchComment = models.CharField(null=True, blank=True, max_length=800)
    DispatchAddress = models.CharField(null=True, blank=True, max_length=800)
    DispatchDate = models.DateTimeField(default = datetime.now)
    orderDeliverDate = models.DateTimeField(default = datetime.now)
    orderDeliverComment = models.CharField(max_length=100, null = True, blank = True)
    orderDeliverConfirmationL = models.CharField(max_length=100, null = True, blank = True)
    orderDeliverConfirmationC = models.CharField(max_length=100, null = True, blank = True)
    GuideUpload = models.CharField(null=True, blank=True, max_length=800)
    GuideUploadDate = models.DateTimeField(default = datetime.now)
    GuideDownload = models.CharField(null= True, blank= True, max_length=100)
    fileStatus = models.CharField(max_length=100, null = True, blank = True)
    preferredData = models.CharField(max_length=100, null = True, blank = True)
    designCheck = models.CharField(max_length=100, null = True, blank = True)
    pickUPAddress = models.CharField(max_length=100, null = True, blank = True)
    reforgid = models.IntegerField(blank=True, null=True)
    cancellationReason = models.CharField(max_length=100, null = True, blank = True)
    cancellationDateTime = models.DateTimeField(default = datetime.now, null=True, blank = True)
    orderPickup = models.BooleanField(default = False)
    orderPickupTime = models.DateTimeField(default = datetime.now, null=True, blank = True)
    dataApprove = models.CharField(max_length=100, null = True, blank = True)
    dataApproveComment = models.CharField(max_length=100, null = True, blank = True)
    availableForCollection = models.BooleanField(default = True)
    fabricationComplete = models.BooleanField(default = False)
    prevStatus = models.CharField(null=True, blank=True, max_length=800)
    fabrication = models.CharField(null= True, blank = True, max_length=50)
    designStatus = models.CharField(null= True, blank = True, max_length=50)
    designComment = models.CharField(null= True, blank = True, max_length=50)
    materialId = models.IntegerField(null=True, blank=True)
    sub_material = models.CharField(null= True, blank = True, max_length=50)
    sub_materialId = models.IntegerField(null=True, blank=True)
    objects = models.Manager()


class ExtraLabItem(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    repid = models.IntegerField(null=True, blank=True)
    lineItemId = models.ForeignKey(Prosthetic, on_delete=models.CASCADE)
    lineItemIdNumber = models.IntegerField(null=True, blank=True)
    itemId = models.IntegerField()
    addOnService = models.CharField(null=True, blank=True, max_length=100)
    unitPrice = models.IntegerField()
    addOnprice = models.IntegerField(null=True, blank=True)
    addOnunit = models.IntegerField(null=True, blank=True)
    objects = models.Manager()


class Suricalguide(models.Model):
    id = models.AutoField(primary_key=True)
    repid=models.IntegerField(null=True, blank=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    item_id = models.CharField(null=True, blank=True, max_length=200)
    sodrid = models.CharField(null=True, blank=True, max_length=200)
    name = models.CharField(null=True, blank=True, max_length=200)
    date = models.DateField(default=date.today)
    service_name = models.CharField(null=True, blank=True, max_length=200)
    order_id = models.CharField(null=True, blank=True, max_length=800)
    pid = models.CharField(null=True, blank=True, max_length=200)
    tooth = models.CharField(null=True, blank=True, max_length=200)
    data_type1 = models.CharField(null=True, blank=True, max_length=200)
    data_type2 = models.CharField(null=True, blank=True, max_length=200)
    output_type = models.CharField(null=True, blank=True, max_length=200)
    guide_type = models.CharField(null=True, blank=True, max_length=200)
    planning_type = models.CharField(null=True, blank=True, max_length=200)
    price = models.IntegerField(null=True, blank=True)
    remark = models.CharField(null=True, blank=True, max_length=800)
    planning = models.FileField(upload_to='static/planning/')
    repsdate = models.DateTimeField(null=True, blank=True)
    badge = models.CharField(max_length=400)
    signurl=models.CharField(max_length=400)
    repby= models.CharField(max_length=200)
    signby = models.CharField(max_length=200)  
    ParentPatient=models.CharField(max_length=200, blank=True, null=True)
    ParentStudy=models.CharField(max_length=200, blank=True, null=True)
    StudyInstanceUID = models.CharField(max_length=200, blank=True, null=True)
    ParentPatient1=models.CharField(max_length=200, blank=True, null=True)
    ParentStudy1=models.CharField(max_length=200, blank=True, null=True)
    StudyInstanceUID1 = models.CharField(max_length=200, blank=True, null=True)
    upload = models.CharField(null=True, blank=True, max_length=800)
    GuideUpload = models.CharField(null=True, blank=True, max_length=800)
    GuideUploadDate = models.DateTimeField(default = datetime.now)
    GuideDownload = models.CharField(null= True, blank= True, max_length=100) 
    upload2 = models.CharField(null=True, blank=True, max_length=800)
    text = HTMLField()
    refer_by = models.CharField(max_length=200, blank=True, null=True)
    portal=models.CharField(max_length=50)
    status = models.CharField(null=True, blank=True, max_length=800)
    shipby = models.CharField(null=True, blank=True, max_length=800)
    est_amount = models.IntegerField(null=True, blank=True)
    final_amount = models.IntegerField(null=True, blank=True)
    comment = models.CharField(null=True, blank=True, max_length=800)
    file = models.CharField(max_length=100, null = True, blank = True)
    size = models.IntegerField(null = True, blank = True)
    file1 = models.CharField(max_length=100, null = True, blank = True)
    size1 = models.IntegerField(null = True, blank = True)
    fileStatus = models.CharField(max_length=100, null = True, blank = True)
    fileComment = models.CharField(max_length=100, null = True, blank = True)
    fileStatus1 = models.CharField(max_length=100, null = True, blank = True)
    fileComment1 = models.CharField(max_length=100, null = True, blank = True)
    feedFileStatus = models.CharField(max_length=100, null = True, blank = True) 
    feedFileComment = models.CharField(max_length=100, null = True, blank = True) 
    IOSFileStatus = models.CharField(max_length=100, null = True, blank = True) 
    IOSFileComment = models.CharField(max_length=100, null = True, blank = True) 
    designUploadDate = models.DateTimeField(default = datetime.now)
    trackingId = models.CharField(null=True, blank=True, max_length=800)
    DispatchComment = models.CharField(null=True, blank=True, max_length=800)
    DispatchAddress = models.CharField(null=True, blank=True, max_length=800)
    DispatchDate = models.DateTimeField(default = datetime.now)
    orderDeliverDate = models.DateTimeField(default = datetime.now)
    orderDeliverComment = models.CharField(max_length=100, null = True, blank = True)
    orderDeliverConfirmationL = models.CharField(max_length=100, null = True, blank = True)
    orderDeliverConfirmationC = models.CharField(max_length=100, null = True, blank = True)
    fabricationComplete = models.BooleanField(default = False)
    reforgid = models.IntegerField(blank=True, null=True)
    preferredData = models.CharField(max_length=100, null = True, blank = True)
    objects = models.Manager()


class Dcmfile(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    refptid=models.IntegerField(null=True, blank=True)
    repid=models.IntegerField(null=True, blank=True)
    serviceid = models.IntegerField(null = True, blank = True)
    sodrid = models.IntegerField(null = True, blank = True)
    pid = models.IntegerField(null = True, blank = True)
    file = models.FileField(upload_to='static/dcmfiles/')
    size = models.IntegerField(null=True, blank=True)
    objects = models.Manager()


class Comments(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    repid = models.IntegerField(null=True, blank=True)
    date=models.DateTimeField(default=datetime.now)
    name=models.CharField(max_length=50, null=True, blank=True)
    comment = models.CharField(max_length=1000, null=True, blank=True)
    objects = models.Manager()


class LabItem(models.Model):
    id = models.AutoField(primary_key=True)
    item = models.CharField(max_length = 100, null = True, blank = True)
    objects = models.Manager()


class LabMaterial(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    itemId = models.ForeignKey(LabItem, on_delete = models.CASCADE)
    material = models.CharField(max_length=100, null=True, blank=True)
    objects = models.Manager()


class SubMaterial(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    itemId = models.ForeignKey(LabItem, on_delete = models.CASCADE)
    materialId = models.ForeignKey(LabMaterial, on_delete = models.CASCADE)
    sub_material = models.CharField(max_length=100, null=True, blank=True)
    objects = models.Manager()


class AddOnLabServices(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    itemId = models.IntegerField()
    addOnService = models.CharField(null=True, blank=True, max_length=100)
    price = models.IntegerField()
    unit = models.IntegerField(default=1)
    descriptions = models.CharField(max_length=100, null=True, blank=True)
    materialId = models.IntegerField(null=True, blank=True)
    sub_materialId = models.IntegerField(null=True, blank=True)
    type = models.CharField(max_length=100, null=True, blank=True)
    objects = models.Manager()


class LabOrderItem(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    itemId = models.ForeignKey(LabItem, on_delete = models.CASCADE)
    item  = models.CharField(null=True, blank=True, max_length=200)
    materialId = models.ForeignKey(LabMaterial, on_delete=models.CASCADE)
    material = models.CharField(null=True, blank=True, max_length=200)
    type = models.CharField(null=True, blank=True, max_length=200)
    method = models.CharField(null=True, blank=True, max_length=200)
    submethod = models.CharField(null=True, blank=True, max_length=100)
    application = models.CharField(null=True, blank=True, max_length=200)
    warranty = models.IntegerField(null=True, blank=True)
    price = models.IntegerField()
    details = models.CharField(null=True, blank=True, max_length=400)
    sub_material = models.CharField(null=True, blank=True, max_length=50)
    sub_materialId = models.IntegerField(null=True, blank=True)
    objects = models.Manager()


class ServiceLog(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    repid = models.IntegerField(null=True, blank=True)
    date = models.DateTimeField(default = datetime.now)
    user = models.CharField(max_length=50, null=True, blank=True)
    usertype = models.CharField(max_length=200)
    log = models.CharField(max_length=100, null=True, blank=True)
    message = models.CharField(max_length=150, null=True, blank=True)
    sodrid = models.CharField(max_length=150, null=True, blank=True)
    service_name = models.CharField(max_length=150, null=True, blank=True)
    patient = models.CharField(max_length=150, null=True, blank=True)
    file = models.CharField(max_length=150, null=True, blank=True)
    status = models.CharField(max_length=100, null = True, blank = True)
    line_item = models.CharField(max_length=100, null = True, blank = True)
    email = models.EmailField(max_length=100, null=True, blank=True)
    objects = models.Manager()


class Notification(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    parent_orgid = models.CharField(null=True, blank=True, max_length=200)
    sendTo = models.IntegerField(null=True, blank=True)
    repid = models.IntegerField(null=True, blank=True)
    serviceOrderId = models.CharField(max_length=100, null = True, blank = True)
    lineItemId = models.CharField(max_length=100, null = True, blank = True)
    service = models.CharField(max_length=100, null = True, blank = True)
    user = models.CharField(max_length=100, null=True, blank=True)
    usertype = models.CharField(max_length=200)
    event = models.CharField(max_length=100, null=True, blank=True)
    details = models.CharField(max_length=200, null=True, blank=True)
    hyperLink = models.CharField(max_length=100, null=True, blank=True)
    read = models.BooleanField(default = False)
    date = models.DateTimeField(default = datetime.now)
    sent = models.BooleanField(default = False)
    objects = models.Manager()


class Appointment(models.Model):
    id = models.AutoField(primary_key=True)
    aptid=models.CharField(max_length=50, null=True, blank=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    name=models.CharField(max_length=50, null=True, blank=True)
    contact = models.IntegerField(null=True, blank=True)
    date = models.DateField(default=date.today)
    email=models.EmailField(max_length=100, null=True, blank=True)
    time = models.TimeField(default=datetime.now)
    centre = models.CharField(max_length=50, null=True, blank=True)
    study = models.CharField(max_length=100, null=True, blank=True)
    status=models.CharField(max_length=100, null=True, blank=True)
    remark = models.CharField(max_length=500, null=True, blank=True)
    objects = models.Manager()


class Sign(models.Model):
    id = models.AutoField(primary_key=True)
    sid=models.CharField(max_length=10,null=True, blank=True)
    sign=models.ImageField(upload_to='static/signs/')


class Self(models.Model):
    id = models.AutoField(primary_key=True)
    vid = models.IntegerField(null=True, blank=True)
    rdate = models.DateField(default=date.today)
    name = models.CharField(max_length=200)
    gender = models.CharField(max_length=200, null=True, blank=True)
    age = models.IntegerField(blank=True)
    email = models.EmailField()
    contact = PhoneField(blank=True, help_text='Contact phone number')


class Modules(models.Model):
    id = models.AutoField(primary_key=True)
    code = models.CharField(max_length=200)
    head = models.CharField(max_length=200)
    pack = models.CharField(max_length=200)


class Pack(models.Model):
    id = models.AutoField(primary_key=True)
    status = models.CharField(max_length=200, null=True, blank=True)
    type = models.CharField(max_length=200, null=True, blank=True)
    applied = models.CharField(max_length=200, null=True, blank=True)
    price = models.IntegerField(null=True, blank=True)
    price2 = models.IntegerField(null=True, blank=True)
    duration = models.CharField(max_length=20, null=True, blank=True)
    duration2 = models.CharField(max_length=20, null=True, blank=True)
    Storage = models.IntegerField(null=True, blank=True, default = 5)
    VCA = models.IntegerField(null=True, blank=True)
    CBCT = models.IntegerField(null=True, blank=True)
    XRAY = models.IntegerField(null=True, blank=True)

class PackDetails(models.Model):
    id = models.AutoField(primary_key = True)
    packId = models.IntegerField(null=True, blank=True)
    packInfo = models.CharField(max_length = 300, null=True, blank=True)
    Storage = models.IntegerField(null=True, blank=True, default = 5)
    VCA = models.IntegerField(null=True, blank=True)
    CBCT = models.IntegerField(null=True, blank=True)
    XRAY = models.IntegerField(null=True, blank=True)
    
class FreeService(models.Model):
    id = models.AutoField(primary_key = True)
    packId = models.IntegerField(null=True, blank=True)
    pack = models.CharField(max_length = 200, null=True, blank=True)
    orgId = models.IntegerField(null=True, blank=True)
    status = models.CharField(max_length = 200, null=True, blank=True)
    service = models.CharField(max_length = 200, null=True, blank=True)
    Storage1 = models.IntegerField(null=True, blank=True)
    Storage2 = models.IntegerField(null=True, blank=True)
    Storage3 = models.IntegerField(null=True, blank=True)
    firstMonth = models.IntegerField(null=True, blank=True)
    secondMonth = models.IntegerField(null=True, blank=True)
    thirdMonth = models.IntegerField(null=True, blank=True)
    VCA1 = models.IntegerField(null=True, blank=True)
    VCA2 = models.IntegerField(null=True, blank=True)
    VCA3 = models.IntegerField(null=True, blank=True)
    startDate1 = models.DateTimeField(null=True, blank=True)
    startDate2 = models.DateTimeField(null=True, blank=True)
    startDate3 = models.DateTimeField(null=True, blank=True)
    objects = models.Manager()

class Subscriptions(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=200)
    scans = models.IntegerField(blank=True, null=True)
    status = models.CharField(max_length=200)
    validity = models.IntegerField(blank=True, null=True)
    applied = models.CharField(max_length=200)
    price = models.IntegerField()
    startDate = models.DateTimeField(default=datetime.now())
    endDate = models.DateField(default=datetime.today())
    Storage = models.IntegerField(blank=True,null=True)
    VCA = models.IntegerField(blank=True,null=True)
    CBCT = models.IntegerField(blank=True,null=True)
    XRAY = models.IntegerField(blank=True,null=True)
    


class Tempid(models.Model):
    id = models.AutoField(primary_key=True)
    repid = models.CharField(max_length=100, blank=True, null=True)
    status = models.CharField(max_length=200)
    orgid=models.ForeignKey(Organisation, on_delete=models.CASCADE)


class AccountSettlement(models.Model):
    id = models.AutoField(primary_key=True)
    Organisation = models.IntegerField(blank=True, null=True)
    fromDate = models.DateField()
    toDate = models.DateField()
    totalIncome = models.IntegerField(blank=True, null=True)
    totalExpense = models.IntegerField(blank=True, null=True)
    totalGST = models.IntegerField(blank=True, null=True)
    totalTransfer = models.IntegerField(blank=True, null=True)
    paymentGatewayFee = models.IntegerField(blank=True, null=True)
    logisticsPartnerFee = models.IntegerField(blank=True, null=True)
    shippingLabelFee = models.IntegerField(blank=True, null=True)
    dentreadServiceFee = models.IntegerField(blank=True, null=True)
    advertiseingFee = models.IntegerField(blank=True, null=True)
    GSTcollected = models.IntegerField(blank=True, null=True)
    GSTrefund = models.IntegerField(blank=True, null=True)
    TransferTobankAccount = models.IntegerField(blank=True, null=True)
    FailedTransfer = models.IntegerField(blank=True, null=True)
    OrganisationType = models.CharField(max_length=200, blank=True, null=True)
    settleStatus = models.CharField(max_length=200, blank=True, null=True, default='No')
    objects = models.Manager()


class Notes(models.Model):
    id = models.AutoField(primary_key=True)
    orgid = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    itemId = models.IntegerField(blank=True, null=True)
    materialId = models.IntegerField(blank=True, null=True)
    note = models.CharField(max_length=200, blank=True, null=True)
    objects = models.Manager()

  
class EmailNotification(models.Model):
    id = models.AutoField(primary_key=True)
    eventCode = models.CharField(max_length=400, blank=True, null=True)
    subject = models.CharField(max_length=400, blank=True, null=True)
    clinicSide = models.CharField(max_length=400, blank=True, null=True)
    labSide = models.CharField(max_length=400, blank=True, null=True)
    adminSide = models.CharField(max_length=400, blank=True, null=True)
    objects = models.Manager()


class EventLog(models.Model):
    id = models.AutoField(primary_key=True)
    eventCode = models.CharField(max_length=400, blank=True, null=True)
    event = models.CharField(max_length=400, blank=True, null=True)
    log = models.CharField(max_length=400, blank=True, null=True)
    orgId = models.IntegerField(blank=True, null=True)
    userId = models.IntegerField(blank=True, null=True)
    time = models.DateTimeField(default=datetime.now())
    objects = models.Manager()


class LabWalletInfo(models.Model):
    id = models.AutoField(primary_key=True)
    orgId = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    totalBalance = models.IntegerField(blank=True, null=True)
    restBalance = models.IntegerField(blank=True, null=True)
    ORDERID = models.CharField(max_length=100, blank=True, null=True)
    TXNID = models.CharField(max_length=100, blank=True, null=True)
    TXNAMOUNT = models.CharField(max_length=100, blank=True, null=True)
    BANKTXNID = models.CharField(max_length=100, blank=True, null=True)
    TXNDATE = models.DateTimeField(blank=True, null=True)
    RESPMSG = models.CharField(max_length=100, blank=True, null=True)
    objects = models.Manager()

class ClinicWalletInfo(models.Model):
    id = models.AutoField(primary_key=True)
    orgId = models.ForeignKey(Organisation, on_delete=models.CASCADE)
    totalBalance = models.IntegerField(blank=True, null=True)
    restBalance = models.IntegerField(blank=True, null=True)
    ORDERID = models.CharField(max_length=100, blank=True, null=True)
    TXNID = models.CharField(max_length=100, blank=True, null=True)
    TXNAMOUNT = models.CharField(max_length=100, blank=True, null=True)
    BANKTXNID = models.CharField(max_length=100, blank=True, null=True)
    TXNDATE = models.DateTimeField(blank=True, null=True)
    RESPMSG = models.CharField(max_length=100, blank=True, null=True)
    request_amount = models.IntegerField(blank=True, null=True)
    objects = models.Manager()


class WalletExpenses(models.Model):
    id = models.AutoField(primary_key=True)
    orgId = models.IntegerField(blank=True, null=True)
    orderId = models.CharField(max_length=100, blank=True, null=True)
    shipmentId = models.CharField(max_length=100, blank=True, null=True)
    amount = models.IntegerField(null=True, blank=True)
    date = models.DateField(default = date.today)
    labId = models.IntegerField(blank=True, null=True)
    status = models.CharField(max_length=100, blank=True, null=True)
    organisationName = models.CharField(max_length=100, blank=True, null=True)
    objects = models.Manager()


class ShipRocketAuth(models.Model):
    id = models.AutoField(primary_key=True)
    username = models.CharField(max_length=100, blank=True, null=True)
    password = models.CharField(max_length=100, blank=True, null=True)
    token = models.CharField(max_length=200, blank=True, null=True)
    objects = models.Manager()


class PickupLocation(models.Model):
    id = models.AutoField(primary_key=True)
    orgId = models.IntegerField(blank=True, null=True)
    pickup_location = models.CharField(max_length=100, blank=True, null=True)
    name = models.CharField(max_length=100, blank=True, null=True)
    email = models.CharField(max_length=100, blank=True, null=True)
    phone = models.IntegerField(blank=True, null=True)
    address = models.CharField(max_length=100, blank=True, null=True)
    address_2 = models.CharField(max_length=100, blank=True, null=True)
    city = models.CharField(max_length=100, blank=True, null=True)
    state = models.CharField(max_length=100, blank=True, null=True)
    country = models.CharField(max_length=100, blank=True, null=True)
    pincode = models.IntegerField(blank=True, null=True)
    objects = models.Manager()


class ShipmentDetailsClinic(models.Model):
    id = models.AutoField(primary_key=True)
    repid = models.IntegerField(blank=True, null=True)
    order_id = models.CharField(max_length=100, blank=True, null=True)
    order_date = models.CharField(max_length=100, blank=True, null=True)
    pickup_location = models.CharField(max_length=100, blank=True, null=True)
    billing_customer_name = models.CharField(max_length=100, blank=True, null=True)
    billing_address = models.CharField(max_length=100, blank=True, null=True)
    billing_city = models.CharField(max_length=100, blank=True, null=True)
    billing_state = models.CharField(max_length=100, blank=True, null=True)
    billing_pincode = models.IntegerField(blank=True, null=True)
    billing_country = models.CharField(max_length=100, blank=True, null=True)
    billing_email = models.CharField(max_length=100, blank=True, null=True)
    billing_phone = models.IntegerField(blank=True, null=True)
    item = models.CharField(max_length=100, blank=True, null=True)
    units = models.IntegerField(blank=True, null=True)
    height = models.FloatField(blank=True, null=True)
    breadth = models.FloatField(blank=True, null=True)
    length = models.FloatField(blank=True, null=True)
    weight = models.FloatField(blank=True, null=True)
    sku = models.CharField(max_length=100, blank=True, null=True)
    shipping_is_billing = models.BooleanField(default = True)
    selling_price = models.IntegerField(blank=True, null=True)
    sub_total = models.IntegerField(blank=True, null=True)
    payment_method = models.CharField(max_length=100, blank=True, null=True)
    locationId = models.IntegerField(blank=True, null=True)
    objects = models.Manager()


class ShipmentOrderDetails(models.Model):
    id = models.AutoField(primary_key=True)
    orgId = models.IntegerField(blank=True, null=True)
    repid = models.IntegerField(blank=True, null=True)
    order_id = models.IntegerField(blank=True, null=True)
    shipment_id = models.IntegerField(blank=True, null=True)
    status = models.CharField(max_length=100, blank=True, null=True)
    status_code = models.CharField(max_length=100, blank=True, null=True)
    onboarding_completed_now = models.CharField(max_length=100, blank=True, null=True)
    awb_code = models.CharField(max_length=100, blank=True, null=True)
    courier_company_id = models.CharField(max_length=100, blank=True, null=True)
    courier_name = models.CharField(max_length=100, blank=True, null=True)
    awb_assign_status = models.CharField(max_length=100, blank=True, null=True)
    pickup_status = models.CharField(max_length=100, blank=True, null=True)
    # new
    shipTo = models.CharField(max_length=200, blank=True, null=True)
    shipBy = models.CharField(max_length=200, blank=True, null=True)
    ship_status = models.CharField(max_length=200, blank=True, null=True)
    ship_date = models.DateField(null = True, blank=True)
    shpDescription = models.TextField()
    pickup_scheduled_date = models.DateTimeField(blank=True, null=True)
    name = models.CharField(max_length=200, blank=True, null=True)
    patient_id = models.CharField(max_length=200, blank=True, null=True)
    dentOrderId = models.CharField(max_length=200, blank=True, null=True)
    order_status = models.CharField(max_length=200, blank=True, null=True)